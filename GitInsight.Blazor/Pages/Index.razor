@page "/"

@using GitInsight.Blazor.Services
@using System.Globalization

<PageTitle>Index</PageTitle>

<h1>GitInsights™</h1>
<p>Welcome to the insights!</p>
<hr>


<div class="row">
  <div class="col-3">
    <RadzenTextBox Placeholder="Username" Class="w-100" @oninput="@(args => SetUsername(args.Value.ToString()))" />
  </div>
  <div class="col-3">
    <RadzenTextBox Placeholder="Repository" Class="w-100" @oninput="@(args => SetRepository(args.Value.ToString()))" />
  </div>
  <div class="col-3">
    <RadzenSelectBar @bind-Value=@mode TValue="string" Change=@(args => OnChange(args, "SelectBar with single selection"))>
        <Items>
            <RadzenSelectBarItem Text="Author" Value="authorValue" />
            <RadzenSelectBarItem Text="Frequency" Value="frequencyValue" />
        </Items>
    </RadzenSelectBar>
  </div>
  <div class="col-3">
    <RadzenButton Click=@RunProgram Text="Run!" ButtonStyle="ButtonStyle.Secondary"></RadzenButton> 
  </div>
</div>
       
  @* @if(mode == "author") {
    <input type="text" placeholder="Author Username" @bind="@authorUsername" @oninput="@(ui => {authorUsername = (string) ui.Value;})" />
  } *@

<p class="alert alert-info">Confirm <strong>@username/@repository</strong> with mode <strong>@mode</strong>.</p>

<div>

    @* <RadzenChart>
        <RadzenColumnSeries Data="@commits" CategoryProperty="Date" Title="@author" LineType="LineType.Dashed"
            ValueProperty="Commits">
            <RadzenSeriesDataLabels Visible="@showDataLabels" />
        </RadzenColumnSeries>
        <RadzenColumnSeries Data="@commits" CategoryProperty="Date" Title="@author" ValueProperty="Commits">
            <RadzenSeriesDataLabels Visible="@showDataLabels" />
        </RadzenColumnSeries>
        <RadzenColumnOptions Radius="5" />
        <RadzenValueAxis Min="0" step="1">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Amount Commits" />
        </RadzenValueAxis>
    </RadzenChart> *@
</div>

@code {
  string username;
  private string repository;
  private string mode = "author";
  string authorValue = "author";
  string frequencyValue = "frequency";
  private string authorUsername;

  bool showDataLabels = false;

  
  GitInsightService gitInsightService = new GitInsightService();


  @* [Inject]
  public IGitInsightService GitInsightService { get; set; } *@

  class DataItem
  {
      public string Date { get; set; }
      public double Commits { get; set; }


  }
    


  void OnChange(object value, string name)
  {
    var str = value is IEnumerable<int> ? string.Join(", ", (IEnumerable<int>)value) : value;
  }

  void SetUsername(string value) {
    username = value;
  }
  void SetRepository(string value) {
    repository = value;
  }
  private void RunProgram() {
    

    if(mode == "author") {
      GitInsightService.GetCommitsFromAuthorAsync(username, repository, authorUsername);
    } else {
      GitInsightService.GetCommitsFrequencyAsync(username, repository);
    }

    Console.WriteLine("Run Gitinsights!");

  }
  
}