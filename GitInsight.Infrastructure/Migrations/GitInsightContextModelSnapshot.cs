// <auto-generated />
using System;
using GitInsight.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GitInsight.Infrastructure.Migrations
{
    [DbContext(typeof(GitInsightContext))]
    partial class GitInsightContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GitInsight.Infrastructure.Commit", b =>
                {
                    b.Property<string>("Sha")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Sha");

                    b.HasIndex("RepoPath");

                    b.HasIndex("Sha")
                        .IsUnique();

                    b.ToTable("Commits");
                });

            modelBuilder.Entity("GitInsight.Infrastructure.Repo", b =>
                {
                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LatestCommitSha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Path");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("GitInsight.Infrastructure.Commit", b =>
                {
                    b.HasOne("GitInsight.Infrastructure.Repo", "Repo")
                        .WithMany("Commits")
                        .HasForeignKey("RepoPath")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("GitInsight.Infrastructure.Repo", b =>
                {
                    b.Navigation("Commits");
                });
#pragma warning restore 612, 618
        }
    }
}
